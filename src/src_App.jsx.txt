import React, { useState, useEffect, useRef } from "react";
import {
  initializeApp
} from "firebase/app";
import {
  getFirestore,
  collection,
  query,
  where,
  addDoc,
  onSnapshot,
  doc,
  updateDoc,
  deleteDoc,
  getDocs,
  serverTimestamp,
  orderBy,
  limit,
  setDoc,
  getDoc,
  arrayUnion,
  arrayRemove,
  writeBatch
} from "firebase/firestore";
import {
  getAuth,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  onAuthStateChanged,
  signOut,
  updatePassword,
  reauthenticateWithCredential,
  EmailAuthProvider,
} from "firebase/auth";
import {
  getStorage,
  ref,
  uploadBytes,
  getDownloadURL,
  deleteObject
} from "firebase/storage";

// --------- Firebase Config and Initialization ---------
const firebaseConfig = {
  apiKey: "AIzaSyBFBtuIw0HVJl-HYZ9DSP1VZqwXMJli_W8",
  authDomain: "darknet-chat-f6b5a.firebaseapp.com",
  projectId: "darknet-chat-f6b5a",
  storageBucket: "darknet-chat-f6b5a.appspot.com",
  messagingSenderId: "1234567890",
  appId: "1:1234567890:web:abcdefg12345",
};
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);
const storage = getStorage(app);

// ----------- THEME CONTEXT -----------
const ThemeContext = React.createContext();

// ----------- LOADER COMPONENT (before login) -----------
const LoaderScreen = ({ onEnd }) => {
  useEffect(() => {
    const t = setTimeout(onEnd, 3000);
    return () => clearTimeout(t);
  }, [onEnd]);
  return (
    <div style={{
      minHeight: "100vh",
      background: "#000",
      display: "flex",
      flexDirection: "column",
      alignItems: "center",
      justifyContent: "center"
    }}>
      <div style={{
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
      }}>
        <img
          src="/images/logo.jpeg"
          alt="App Icon"
          style={{
            width: 80,
            height: 80,
            marginBottom: 25,
            marginTop: -40
          }}
        />
        <div style={{ fontWeight: 900, color: "#219653", fontSize: 32, marginBottom: 30, letterSpacing: 2 }}>
          Buddy Chat
        </div>
        <div style={{ marginTop: 10 }}>
          <div className="loader-bar" style={{
            width: 180,
            height: 10,
            background: "#222",
            borderRadius: 10,
            overflow: "hidden",
            boxShadow: "0 3px 14px rgba(33, 150, 83, 0.15)"
          }}>
            <div className="loader-bar-inner" style={{
              width: "100%",
              height: "100%",
              background: "linear-gradient(90deg,#219653,#6ee7b7)",
              animation: "loaderBarAnim 3s linear"
            }} />
          </div>
        </div>
        <style>{`
        @keyframes loaderBarAnim {
          from { width: 0%; }
          to   { width: 100%; }
        }
        `}</style>
      </div>
    </div>
  );
};

// ----------- GROUP CHAT BOT EXAMPLE -----------
function groupBotHandler(command, groupId, sendBotMessage) {
  // Example: /giphy cat
  if (command.startsWith("/giphy ")) {
    const query = command.replace("/giphy ", "");
    fetch(`https://api.giphy.com/v1/gifs/search?api_key=dc6zaTOxFJmzC&q=${encodeURIComponent(query)}&limit=1`)
      .then(res => res.json())
      .then(data => {
        if (data.data[0]?.images?.original?.url)
          sendBotMessage({
            mediaUrl: data.data[0].images.original.url,
            mediaType: "gif",
            text: `GIF: ${query}`,
            bot: true
          });
        else
          sendBotMessage({ text: "No GIF found!", bot: true });
      });
    return true;
  }
  if (command === "/wave") {
    sendBotMessage({ text: "👋 The bot says hi!", bot: true });
    return true;
  }
  // Add more fun bot commands here
  return false;
}

// ----------- MAIN APP -----------
export default function App() {
  // General user state
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [showLoader, setShowLoader] = useState(true);

  // Profile
  const [username, setUsername] = useState("");
  const [usernameInput, setUsernameInput] = useState("");
  const [usernameEdit, setUsernameEdit] = useState(false);
  const [userId, setUserId] = useState("");
  const [profilePhotoURL, setProfilePhotoURL] = useState(null);
  const [bio, setBio] = useState("");
  const [bioEditMode, setBioEditMode] = useState(false);

  // Auth
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");

  // Theme and UI
  const [theme, setTheme] = useState(localStorage.getItem("theme") || "light");
  const [isMobile, setIsMobile] = useState(window.innerWidth <= 800);
  const [showSidebar, setShowSidebar] = useState(true);

  // Profile photo upload
  const [photoFile, setPhotoFile] = useState(null);
  const [preview, setPreview] = useState(null);
  const [uploading, setUploading] = useState(false);

  // Chat and group chat state
  const [groups, setGroups] = useState([]);
  const [currentGroup, setCurrentGroup] = useState(null);
  const [groupMessages, setGroupMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [newMedia, setNewMedia] = useState(null);
  const [activeReactions, setActiveReactions] = useState({});
  const [replyTo, setReplyTo] = useState(null);
  const [editMsg, setEditMsg] = useState(null);
  const [pinnedMsg, setPinnedMsg] = useState(null);
  const [starredMsgs, setStarredMsgs] = useState([]);
  const [mentionUsers, setMentionUsers] = useState([]);
  const [showPinned, setShowPinned] = useState(false);

  // Group admin controls
  const [groupAdmins, setGroupAdmins] = useState([]);
  const [groupMembers, setGroupMembers] = useState([]);
  const [isAdmin, setIsAdmin] = useState(false);

  // User settings
  const [showProfileUpload, setShowProfileUpload] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [showDeleteAccount, setShowDeleteAccount] = useState(false);
  const [deletePassword, setDeletePassword] = useState("");

  // Multimedia, stickers, voice
  const [showStickerPanel, setShowStickerPanel] = useState(false);

  // Notification
  const [pushEnabled, setPushEnabled] = useState(false);

  // Responsive
  useEffect(() => {
    function handleResize() {
      setIsMobile(window.innerWidth <= 800);
      if (window.innerWidth > 800) setShowSidebar(true);
      if (window.innerWidth <= 800 && currentGroup) setShowSidebar(false);
    }
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, [currentGroup]);

  // Loader before login
  useEffect(() => {
    if (!showLoader) setLoading(false);
  }, [showLoader]);

  // Auth Listener
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      setUser(currentUser);
      setLoading(false);
      if (currentUser) {
        await loadUserData(currentUser.uid);
        subscribeGroups(currentUser.uid);
        setUserId(currentUser.uid);
      } else {
        setGroups([]);
        setCurrentGroup(null);
        setProfilePhotoURL(null);
        setUserId("");
        setBio("");
      }
    });
    return () => unsubscribe();
  }, []);

  // Load initial user data
  async function loadUserData(uid) {
    try {
      const docSnap = await getDoc(doc(db, "users", uid));
      if (docSnap.exists()) {
        const data = docSnap.data();
        if (data.profilePhotoURL) setProfilePhotoURL(data.profilePhotoURL);
        setUsername(data.username || "");
        setUsernameInput(data.username || "");
        setUserId(data.userId || uid);
        setBio(data.bio || "");
      }
    } catch (err) {
      console.error("Error loading user data", err);
    }
  }

  // Group subscription
  function subscribeGroups(uid) {
    const q = query(collection(db, "groups"), where("members", "array-contains", uid));
    return onSnapshot(q, (querySnapshot) => {
      const groupList = [];
      querySnapshot.forEach((doc) => {
        groupList.push({ id: doc.id, ...doc.data() });
      });
      setGroups(groupList);
    });
  }

  useEffect(() => {
    // Current group admin/members info
    if (!currentGroup) return;
    const groupRef = doc(db, "groups", currentGroup.id);
    return onSnapshot(groupRef, (snap) => {
      if (!snap.exists()) return;
      setGroupAdmins(snap.data().admins || []);
      setGroupMembers(snap.data().members || []);
      setIsAdmin((snap.data().admins || []).includes(user?.uid));
      setPinnedMsg(snap.data().pinnedMsg || null);
    });
  }, [currentGroup, user]);

  // Group message subscription
  useEffect(() => {
    if (!user || !currentGroup) {
      setGroupMessages([]);
      return;
    }
    const msgsRef = collection(db, "groups", currentGroup.id, "messages");
    const q = query(msgsRef, orderBy("createdAt", "asc"), limit(200));
    const unsubscribe = onSnapshot(q, (qsnap) => {
      const msgs = [];
      qsnap.forEach((doc) => {
        msgs.push({ id: doc.id, ...doc.data() });
      });
      setGroupMessages(msgs);
    });
    return () => unsubscribe();
  }, [user, currentGroup]);

  // Profile photo upload
  async function uploadProfilePhoto(file) {
    setError("");
    if (!file) {
      setError("Please select a photo first.");
      return;
    }
    if (!user) {
      setError("No user logged in.");
      return;
    }
    setUploading(true);
    try {
      if (profilePhotoURL) {
        try {
          const match = profilePhotoURL.match(/\/o\/(.+)\?/);
          if (match) {
            const storagePath = decodeURIComponent(match[1]);
            const oldPhotoRef = ref(storage, storagePath);
            await deleteObject(oldPhotoRef);
          }
        } catch (e) { }
      }
      const photoRef = ref(storage, `profilePhotos/${user.uid}/${Date.now()}_${file.name}`);
      await uploadBytes(photoRef, file);
      const url = await getDownloadURL(photoRef);
      await updateDoc(doc(db, "users", user.uid), { profilePhotoURL: url });
      setProfilePhotoURL(url);
      setPhotoFile(null);
      setPreview(null);
      setShowProfileUpload(false);
      setError("");
    } catch (err) {
      setError("Upload failed: " + err.message);
    }
    setUploading(false);
  }

  // Remove profile photo
  async function removeProfilePhoto() {
    if (!user || !profilePhotoURL) return;
    try {
      await updateDoc(doc(db, "users", user.uid), { profilePhotoURL: null });
      setProfilePhotoURL(null);
      setError("");
    } catch (err) {
      setError("Failed to remove photo: " + err.message);
    }
  }

  // ====== Login/Signup logic (no email, only username+password) ======
  async function isUsernameTaken(name, excludeUid) {
    const q = query(collection(db, "users"), where("username", "==", name.trim()));
    const querySnap = await getDocs(q);
    if (excludeUid) {
      return !querySnap.empty && querySnap.docs[0].id !== excludeUid;
    }
    return !querySnap.empty;
  }

  async function handleSignup() {
    setError("");
    if (!usernameInput.trim()) {
      setError("Username is required");
      return;
    }
    if (!password.trim()) {
      setError("Password is required");
      return;
    }
    if (await isUsernameTaken(usernameInput)) {
      setError("Username already taken, try another.");
      return;
    }
    const pseudoEmail = `${usernameInput.trim().toLowerCase()}@buddychat.fake`;
    try {
      const userCredential = await createUserWithEmailAndPassword(auth, pseudoEmail, password);
      const currentUser = userCredential.user;
      await setDoc(doc(db, "users", currentUser.uid), {
        username: usernameInput.trim(),
        profilePhotoURL: null,
        bio: "",
        userId: currentUser.uid,
        createdAt: serverTimestamp(),
      });
      setUserId(currentUser.uid);
    } catch (err) {
      setError(err.message);
    }
  }

  async function handleLogin() {
    setError("");
    if (!usernameInput.trim()) {
      setError("Username is required");
      return;
    }
    if (!password.trim()) {
      setError("Password is required");
      return;
    }
    const pseudoEmail = `${usernameInput.trim().toLowerCase()}@buddychat.fake`;
    try {
      await signInWithEmailAndPassword(auth, pseudoEmail, password);
    } catch (err) {
      setError("Invalid username or password.");
    }
  }

  async function handleLogout() {
    await signOut(auth);
  }

  // Change username/bio
  async function handleChangeUsername(newUsername) {
    if (!user) return;
    if (!newUsername.trim()) return;
    if (await isUsernameTaken(newUsername, user.uid)) {
      setError("Username already taken, try another.");
      return;
    }
    try {
      await updateDoc(doc(db, "users", user.uid), { username: newUsername });
      setUsername(newUsername);
      setUsernameInput(newUsername);
      setUsernameEdit(false);
      alert("Username updated successfully!");
    } catch (err) {
      setError("Failed to change username: " + err.message);
    }
  }
  async function handleChangeBio(newBio) {
    if (!user) return;
    try {
      await updateDoc(doc(db, "users", user.uid), { bio: newBio });
      setBio(newBio);
      setBioEditMode(false);
    } catch (err) {
      setError("Failed to update bio: " + err.message);
    }
  }

  // Delete user account with password
  async function handleDeleteAccount() {
    if (!user) return;
    if (!deletePassword) {
      setError("Enter your password to confirm account deletion.");
      return;
    }
    try {
      const credential = EmailAuthProvider.credential(user.email, deletePassword);
      await reauthenticateWithCredential(user, credential);
      await deleteDoc(doc(db, "users", user.uid));
      await user.delete();
      setShowDeleteAccount(false);
    } catch (err) {
      setError("Failed to delete account: " + err.message);
    }
  }

  // Theme switch
  function handleThemeSwitch() {
    const newTheme = theme === "light" ? "dark" : "light";
    setTheme(newTheme);
    localStorage.setItem("theme", newTheme);
    document.body.setAttribute("data-theme", newTheme);
  }

  // ====== Group Chat Logic ======
  function sendBotMessage(msg) {
    if (!currentGroup) return;
    addDoc(collection(db, "groups", currentGroup.id, "messages"), {
      ...msg,
      from: "bot",
      createdAt: serverTimestamp(),
      reactions: {},
      status: "sent"
    });
  }
  async function sendMessage() {
    if ((!newMessage.trim() && !newMedia) || !currentGroup || !user) return;
    // BOT commands
    if (groupBotHandler(newMessage.trim(), currentGroup.id, sendBotMessage)) {
      setNewMessage("");
      setNewMedia(null);
      return;
    }
    // Media upload
    let mediaUrl = null, mediaType = null;
    if (newMedia) {
      if (newMedia.type.startsWith("image/")) mediaType = "image";
      else if (newMedia.type.startsWith("video/")) mediaType = "video";
      else if (newMedia.type.startsWith("audio/")) mediaType = "voice";
      else mediaType = "file";
      const storageRef = ref(storage, `groupChats/${currentGroup.id}/${Date.now()}_${newMedia.name}`);
      await uploadBytes(storageRef, newMedia);
      mediaUrl = await getDownloadURL(storageRef);
    }
    // If editing
    if (editMsg) {
      const msgRef = doc(db, "groups", currentGroup.id, "messages", editMsg.id);
      await updateDoc(msgRef, {
        text: newMessage.trim(),
        mediaUrl,
        mediaType,
        edited: true
      });
      setEditMsg(null);
    } else {
      await addDoc(collection(db, "groups", currentGroup.id, "messages"), {
        text: newMessage.trim(),
        mediaUrl,
        mediaType,
        from: user.uid,
        username,
        createdAt: serverTimestamp(),
        replyTo: replyTo ? replyTo.id : null,
        reactions: {},
        status: "sent",
        pinned: false,
        starredBy: []
      });
    }
    setNewMessage("");
    setNewMedia(null);
    setReplyTo(null);
  }

  async function pinMessage(msgId) {
    if (!isAdmin) return;
    await updateDoc(doc(db, "groups", currentGroup.id), { pinnedMsg: msgId });
    setPinnedMsg(msgId);
  }
  async function unpinMessage() {
    if (!isAdmin) return;
    await updateDoc(doc(db, "groups", currentGroup.id), { pinnedMsg: null });
    setPinnedMsg(null);
  }
  async function starMessage(msgId) {
    if (!user) return;
    const msgRef = doc(db, "groups", currentGroup.id, "messages", msgId);
    await updateDoc(msgRef, { starredBy: arrayUnion(user.uid) });
    setStarredMsgs([...starredMsgs, msgId]);
  }
  async function unstarMessage(msgId) {
    if (!user) return;
    const msgRef = doc(db, "groups", currentGroup.id, "messages", msgId);
    await updateDoc(msgRef, { starredBy: arrayRemove(user.uid) });
    setStarredMsgs(starredMsgs.filter(mid => mid !== msgId));
  }
  async function reactToMessage(msgId, emoji) {
    const msgRef = doc(db, "groups", currentGroup.id, "messages", msgId);
    const msgSnap = await getDoc(msgRef);
    if (!msgSnap.exists()) return;
    const reactions = msgSnap.data().reactions || {};
    const prev = reactions[emoji] || [];
    if (prev.includes(user.uid)) {
      // remove reaction
      await updateDoc(msgRef, { [`reactions.${emoji}`]: arrayRemove(user.uid) });
    } else {
      await updateDoc(msgRef, { [`reactions.${emoji}`]: arrayUnion(user.uid) });
    }
  }
  async function editMessage(msg) {
    setEditMsg(msg);
    setNewMessage(msg.text || "");
    setNewMedia(null);
  }
  async function deleteMessage(msgId) {
    if (!currentGroup) return;
    await deleteDoc(doc(db, "groups", currentGroup.id, "messages", msgId));
  }
  function setReplyTarget(msg) {
    setReplyTo(msg);
  }
  function cancelEdit() {
    setEditMsg(null);
    setReplyTo(null);
    setNewMessage("");
    setNewMedia(null);
  }

  // ====== Group admin controls ======
  async function addUserToGroup(usernameToAdd) {
    // Add by username
    const q = query(collection(db, "users"), where("username", "==", usernameToAdd.trim()));
    const querySnap = await getDocs(q);
    if (querySnap.empty) {
      setError("User not found");
      return;
    }
    const uidToAdd = querySnap.docs[0].id;
    if (groupMembers.includes(uidToAdd)) {
      setError("Already a member");
      return;
    }
    await updateDoc(doc(db, "groups", currentGroup.id), {
      members: arrayUnion(uidToAdd)
    });
  }
  async function removeUserFromGroup(uid) {
    if (!isAdmin) return;
    await updateDoc(doc(db, "groups", currentGroup.id), {
      members: arrayRemove(uid),
      admins: arrayRemove(uid) // If admin, also remove as admin
    });
  }
  async function promoteToAdmin(uid) {
    if (!isAdmin) return;
    await updateDoc(doc(db, "groups", currentGroup.id), {
      admins: arrayUnion(uid)
    });
  }
  async function demoteFromAdmin(uid) {
    if (!isAdmin) return;
    await updateDoc(doc(db, "groups", currentGroup.id), {
      admins: arrayRemove(uid)
    });
  }

  // ====== UI/Customization/Media Queries ======
  function handlePhotoChange(e) {
    setError("");
    const file = e.target.files[0];
    if (file) {
      if (!file.type.startsWith("image/")) {
        setError("Please select an image file");
        return;
      }
      if (file.size > 5 * 1024 * 1024) {
        setError("File size should be less than 5MB");
        return;
      }
      setPhotoFile(file);
      setPreview(URL.createObjectURL(file));
    }
  }

  function handleMediaChange(e) {
    const file = e.target.files[0];
    if (file) setNewMedia(file);
  }

  // Push notification
  async function enablePush() {
    if (!("Notification" in window)) return;
    if (Notification.permission === "granted") setPushEnabled(true);
    else if (Notification.permission !== "denied") {
      const perm = await Notification.requestPermission();
      setPushEnabled(perm === "granted");
    }
  }
  function notify(title, body) {
    if (pushEnabled && "Notification" in window) {
      new Notification(title, { body });
    }
  }

  // Fun effects
  function funEffect(type) {
    if (type === "confetti") {
      // Just a simple simulated effect
      alert("🎉 Confetti! (implement real effect or use a library like canvas-confetti)");
    }
  }

  // ====== Loader ======
  if (!user && showLoader) return <LoaderScreen onEnd={() => setShowLoader(false)} />;
  if (loading) return null;

  // ====== LOGIN FORM ======
  if (!user)
    return (
      <div className="login-container">
        <div className="login-header">Buddy Chat</div>
        <div className="login-form">
          <img src="/images/logo.jpeg" alt="App Icon" className="login-logo" />
          <input
            type="text"
            placeholder="Username"
            value={usernameInput}
            autoComplete="username"
            onChange={(e) => setUsernameInput(e.target.value)}
            className="login-input"
          />
          <input
            type="password"
            placeholder="Password"
            value={password}
            autoComplete="current-password"
            onChange={(e) => setPassword(e.target.value)}
            className="login-input"
          />
          <div className="login-btn-row">
            <button onClick={handleLogin} className="login-btn main-btn">Login</button>
            <button onClick={handleSignup} className="login-btn">Signup</button>
          </div>
          {error && <p className="login-error">{error}</p>}
        </div>
        <style>{`
          .login-container {
            display: flex; flex-direction: column; align-items: center; justify-content: center; min-height: 100vh; background: var(--bg);
          }
          .login-header {
            font-size: 2rem; font-weight: 900; color: #219653; margin-top: 1.5rem;
          }
          .login-form {
            background: #fff; padding: 30px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.08); width: 340px; margin-top: 30px;
            display: flex; flex-direction: column; align-items: center;
          }
          .login-logo { width: 60px; height: 60px; margin-bottom: 16px; border-radius: 50%; }
          .login-input { width: 100%; margin-bottom: 14px; padding: 12px; border: 1px solid #ddd; border-radius: 5px; font-size: 16px; }
          .login-btn-row { display: flex; gap: 10px; width: 100%; }
          .login-btn { flex: 1; padding: 12px; background: #219653; color: #fff; border: none; border-radius: 5px; font-size: 16px; cursor: pointer; }
          .login-btn.main-btn { background: #28a745; }
          .login-error { color: #ff5858; text-align: center; margin-top: 12px; }
          @media (max-width: 600px) {
            .login-form { width: 95vw; min-width: 0; }
          }
        `}</style>
      </div>
    );

  // ====== MAIN APP UI ======
  return (
    <ThemeContext.Provider value={{ theme, handleThemeSwitch }}>
      <div className={`main-app ${theme}`}>
        {/* HEADER */}
        <div className="header">
          <span className="header-title">Buddy Chat</span>
          <button onClick={() => setShowSettings(true)} className="header-btn">⚙️</button>
        </div>

        {/* SIDEBAR (Groups and Profile) */}
        <div className={`sidebar ${showSidebar ? "shown" : ""}`}>
          <div className="sidebar-profile">
            <img src={profilePhotoURL || "/images/logo.jpeg"} alt="Profile" className="profile-img" />
            <div>
              {usernameEdit ? (
                <input
                  value={usernameInput}
                  onChange={e => setUsernameInput(e.target.value)}
                  onBlur={() => handleChangeUsername(usernameInput)}
                  className="profile-edit"
                  autoFocus
                />
              ) : (
                <span className="profile-username" onClick={() => setUsernameEdit(true)}>{username}</span>
              )}
              <div className="profile-id">ID: {userId}</div>
              <div>
                {bioEditMode ? (
                  <textarea
                    value={bio}
                    onChange={e => setBio(e.target.value)}
                    onBlur={() => handleChangeBio(bio)}
                    className="profile-edit"
                    rows={2}
                  />
                ) : (
                  <div className="profile-bio" onClick={() => setBioEditMode(true)} title="Click to edit bio">
                    {bio || <span style={{ color: "#aaa" }}>Click to add bio</span>}
                  </div>
                )}
              </div>
            </div>
            <button className="sidebar-btn" onClick={() => setShowProfileUpload(true)}>📷</button>
          </div>
          {/* Group List */}
          <div className="sidebar-groups">
            <div className="sidebar-groups-header">Groups</div>
            {groups.map(g => (
              <div
                key={g.id}
                className={`sidebar-group ${currentGroup?.id === g.id ? "active" : ""}`}
                onClick={() => {
                  setCurrentGroup(g);
                  if (isMobile) setShowSidebar(false);
                }}
              >
                <span>{g.name}</span>
                {g.admins?.includes(user.uid) && <span className="group-admin-badge">Admin</span>}
              </div>
            ))}
            <button className="sidebar-btn main-btn" onClick={() => {
              const name = prompt("Enter new group name:");
              if (name) {
                addDoc(collection(db, "groups"), {
                  name: name.trim(),
                  members: [user.uid],
                  admins: [user.uid],
                  createdAt: serverTimestamp()
                });
              }
            }}>+ New Group</button>
          </div>
        </div>

        {/* MOBILE HAMBURGER */}
        {isMobile && !showSidebar && (
          <button className="mobile-menu" onClick={() => setShowSidebar(true)}>☰</button>
        )}

        {/* MAIN CHAT PANEL */}
        <div className="chat-panel">
          {/* Show pinned message */}
          {pinnedMsg && showPinned && (
            <div className="pinned-msg-bar" onClick={() => setShowPinned(false)}>
              <span>Pinned: </span>
              {groupMessages.find(msg => msg.id === pinnedMsg)?.text}
              {isAdmin && <button onClick={unpinMessage}>Unpin</button>}
            </div>
          )}
          {currentGroup ? (
            <>
              <div className="chat-header">
                <span>{currentGroup.name}</span>
                {pinnedMsg && <button className="pinned-btn" onClick={() => setShowPinned(true)}>📌</button>}
                <button className="fun-btn" onClick={() => funEffect("confetti")}>🎉</button>
              </div>
              <div className="chat-body">
                {groupMessages.map((msg, idx) => (
                  <GroupMessageItem
                    key={msg.id}
                    msg={msg}
                    currentUser={user.uid}
                    onPin={() => pinMessage(msg.id)}
                    onUnpin={unpinMessage}
                    onReact={emoji => reactToMessage(msg.id, emoji)}
                    onReply={() => setReplyTarget(msg)}
                    onEdit={() => editMessage(msg)}
                    onDelete={() => deleteMessage(msg.id)}
                    onStar={() => starMessage(msg.id)}
                    onUnstar={() => unstarMessage(msg.id)}
                    isPinned={pinnedMsg === msg.id}
                    isStarred={msg.starredBy?.includes(user.uid)}
                    isAdmin={isAdmin}
                    replyToMsg={groupMessages.find(m => m.id === msg.replyTo)}
                  />
                ))}
                <div style={{ height: 70 }} />
              </div>
              {/* Message Compose */}
              <div className="chat-compose">
                {replyTo && (
                  <div className="reply-bar">
                    Replying to: {replyTo.text}
                    <button onClick={() => setReplyTo(null)}>×</button>
                  </div>
                )}
                {editMsg && (
                  <div className="reply-bar" style={{ background: "#eee" }}>
                    Editing message
                    <button onClick={cancelEdit}>×</button>
                  </div>
                )}
                <input
                  type="text"
                  value={newMessage}
                  onChange={e => setNewMessage(e.target.value)}
                  onKeyDown={e => e.key === "Enter" && sendMessage()}
                  placeholder="Type a message..."
                  className="chat-input"
                />
                <input type="file" style={{ display: "none" }} id="media-upload" onChange={handleMediaChange} />
                <label htmlFor="media-upload" className="chat-upload-btn">📎</label>
                <button className="chat-send-btn" onClick={sendMessage}>Send</button>
                <button className="chat-sticker-btn" onClick={() => setShowStickerPanel(p => !p)}>😺</button>
                {showStickerPanel && (
                  <div className="sticker-panel">
                    {["😺", "😂", "🎉", "🔥", "💯", "🤖", "🥳", "❤️"].map(sticker => (
                      <span
                        key={sticker}
                        className="sticker"
                        onClick={() => {
                          setNewMessage(newMessage + sticker);
                          setShowStickerPanel(false);
                        }}
                      >{sticker}</span>
                    ))}
                  </div>
                )}
                {newMedia && (
                  <div className="preview-media">
                    {newMedia.type.startsWith("image/")
                      ? <img src={URL.createObjectURL(newMedia)} alt="preview" style={{ maxWidth: 80 }} />
                      : <div>{newMedia.name}</div>
                    }
                    <button onClick={() => setNewMedia(null)}>×</button>
                  </div>
                )}
              </div>
            </>
          ) : (
            <div className="chat-placeholder">
              <h3>Buddy Chat Group</h3>
              <p>Select or create a group to start chatting!</p>
            </div>
          )}
        </div>

        {/* PROFILE PHOTO UPLOAD MODAL */}
        {showProfileUpload && (
          <div className="modal-bg" onClick={() => setShowProfileUpload(false)}>
            <div className="modal" onClick={e => e.stopPropagation()}>
              <h4>Profile Photo</h4>
              <input type="file" accept="image/*" onChange={handlePhotoChange} />
              {preview && <img src={preview} alt="Preview" style={{ width: 80, borderRadius: "50%" }} />}
              <div className="modal-btn-row">
                <button onClick={() => uploadProfilePhoto(photoFile)} disabled={uploading || !photoFile} className="main-btn">
                  {uploading ? "Uploading..." : "Upload"}
                </button>
                {profilePhotoURL && (
                  <button onClick={removeProfilePhoto} className="danger-btn">Remove</button>
                )}
                <button onClick={() => setShowProfileUpload(false)}>Close</button>
              </div>
              {error && <div className="modal-error">{error}</div>}
            </div>
          </div>
        )}

        {/* SETTINGS MODAL */}
        {showSettings && (
          <div className="modal-bg" onClick={() => setShowSettings(false)}>
            <div className="modal" onClick={e => e.stopPropagation()}>
              <h3>Settings</h3>
              <button className="modal-btn" onClick={handleThemeSwitch}>
                Theme: {theme === "dark" ? "Dark" : "Light"}
              </button>
              <button className="modal-btn" onClick={enablePush}>
                Enable Push Notifications
              </button>
              <button className="modal-btn" onClick={handleLogout}>Logout</button>
              <button className="modal-btn danger-btn" onClick={() => setShowDeleteAccount(true)}>Delete Account</button>
              <button className="modal-btn" onClick={() => setShowSettings(false)}>Close</button>
            </div>
          </div>
        )}

        {/* DELETE ACCOUNT MODAL */}
        {showDeleteAccount && (
          <div className="modal-bg" onClick={() => setShowDeleteAccount(false)}>
            <div className="modal" onClick={e => e.stopPropagation()}>
              <h4>Delete Account</h4>
              <input
                type="password"
                placeholder="Enter password to confirm"
                value={deletePassword}
                onChange={e => setDeletePassword(e.target.value)}
                className="modal-input"
              />
              <button className="modal-btn danger-btn" onClick={handleDeleteAccount}>Delete</button>
              <button className="modal-btn" onClick={() => setShowDeleteAccount(false)}>Cancel</button>
              {error && <div className="modal-error">{error}</div>}
            </div>
          </div>
        )}

        {/* MOBILE/RESPONSIVE STYLES */}
        <style>{`
          :root {
            --main: #219653; --bg: #f0f2f5; --text: #23272f; --muted: #888;
          }
          body[data-theme="dark"], .main-app.dark { --main: #219653; --bg: #23272f; --text: #fff; }
          .main-app { display: flex; min-height: 100vh; background: var(--bg); color: var(--text); }
          .header { position: fixed; top: 0; left: 0; width: 100vw; height: 2.7rem; background: var(--main); color: #fff; z-index: 1000; display: flex; align-items: center; justify-content: space-between; padding: 0 1rem; font-size: 1.3rem; font-weight: bold; box-shadow: 0 2px 8px rgba(0,0,0,0.06);}
          .header-title { font-size: 1.3rem;}
          .header-btn { background: none; border: none; color: #fff; font-size: 1.5rem; cursor: pointer;}
          .sidebar { width: 290px; background: #fff; border-right: 1px solid #ddd; margin-top: 2.7rem; min-height: calc(100vh - 2.7rem); display: flex; flex-direction: column; z-index: 200; }
          .sidebar-profile { display: flex; align-items: flex-start; gap: 12px; padding: 1.2rem 1rem 0.5rem 1rem; border-bottom: 1px solid #eee;}
          .profile-img { width: 54px; height: 54px; border-radius: 50%; object-fit: cover; border: 2px solid var(--main);}
          .profile-username { font-weight: 900; color: var(--main); font-size: 1.1rem; cursor: pointer;}
          .profile-id { font-size: 11px; color: var(--muted);}
          .profile-bio { font-size: 13px; color: var(--muted); margin-top: 4px; cursor: pointer;}
          .profile-edit { width: 100%; font-size: 13px; margin-top: 3px;}
          .sidebar-btn { margin-left: auto; background: var(--main); color: #fff; border: none; border-radius: 5px; padding: 4px 8px; font-size: 1.1rem; cursor: pointer;}
          .main-btn { background: #28a745 !important;}
          .danger-btn { background: #dc3545 !important; color: #fff;}
          .sidebar-groups { flex: 1; padding: 1rem;}
          .sidebar-groups-header { font-weight: bold; color: var(--main); margin-bottom: 0.5rem;}
          .sidebar-group { padding: 9px 7px; border-radius: 6px; margin-bottom: 5px; cursor: pointer; font-weight: 500; display: flex; align-items: center; }
          .sidebar-group.active, .sidebar-group:hover { background: #e9fbe6;}
          .group-admin-badge { font-size: 10px; color: #fff; background: #219653; margin-left: 7px; border-radius: 5px; padding: 2px 6px;}
          .mobile-menu { position: fixed; top: 17px; left: 17px; z-index: 3000; background: var(--main); color: #fff; border: 0; border-radius: 50%; width: 44px; height: 44px; font-size: 1.6rem; box-shadow: 0 2px 12px rgba(0,0,0,0.18); cursor: pointer;}
          .sidebar:not(.shown) { display: block;}
          .sidebar.shown { display: block;}
          @media (max-width: 800px) {
            .sidebar { display: none; position: fixed; z-index: 3000; left: 0; top: 2.7rem; width: 85vw; max-width: 350px; min-width: 200px; height: calc(100vh - 2.7rem); box-shadow: 2px 0 18px rgba(0,0,0,0.21);}
            .sidebar.shown { display: block;}
          }
          .chat-panel { flex: 1; margin-top: 2.7rem; display: flex; flex-direction: column; min-width: 0;}
          .chat-header { height: 2.5rem; background: #fff; display: flex; align-items: center; padding: 0 1.2rem; border-bottom: 1px solid #eee; font-weight: bold; font-size: 1.15rem; gap: 7px;}
          .fun-btn, .pinned-btn { background: none; border: none; font-size: 1.3rem; cursor: pointer; margin-left: 8px;}
          .chat-body { flex: 1; overflow-y: auto; padding: 1.1rem; background: #f8f9fa;}
          .chat-compose { display: flex; align-items: center; gap: 6px; padding: 10px 15px; border-top: 1px solid #eee; background: #fff; position: relative;}
          .chat-input { flex: 1; padding: 10px; border: 1px solid #ddd; border-radius: 17px; font-size: 1rem;}
          .chat-send-btn { padding: 8px 19px; background: var(--main); color: #fff; border: none; border-radius: 17px; font-size: 1rem; cursor: pointer;}
          .chat-upload-btn, .chat-sticker-btn { background: none; border: none; font-size: 1.25rem; cursor: pointer;}
          .preview-media { margin-left: 8px; display: flex; align-items: center;}
          .preview-media img { border-radius: 7px; }
          .preview-media button { margin-left: 6px; background: #dc3545; color: #fff; border: none; border-radius: 50%; width: 22px; height: 22px; font-size: 1rem; cursor: pointer;}
          .sticker-panel { position: absolute; bottom: 55px; right: 15px; background: #fff; border: 1px solid #ddd; border-radius: 8px; padding: 10px 8px; box-shadow: 0 2px 12px rgba(0,0,0,0.10);}
          .sticker { font-size: 1.5em; margin: 3px; cursor: pointer;}
          .reply-bar { background: #e9fbe6; padding: 6px 11px; border-radius: 8px; margin-bottom: 7px; font-size: 0.97em; display: flex; align-items: center; gap: 7px;}
          .pinned-msg-bar { background: #fff2bf; color: #444; padding: 10px; border-bottom: 1px solid #eee; font-weight: 600; display: flex; align-items: center; gap: 7px;}
          .chat-placeholder { display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%; color: var(--muted);}
          /* Modal styles */
          .modal-bg { position: fixed; left: 0; top: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.35); display: flex; align-items: center; justify-content: center; z-index: 5001;}
          .modal { background: #fff; color: #23272f; padding: 30px; border-radius: 12px; min-width: 320px; box-shadow: 0 2px 18px rgba(0,0,0,0.12); max-width: 400px;}
          .modal-btn-row { display: flex; gap: 8px; margin-top: 15px;}
          .modal-btn { padding: 9px 16px; border-radius: 7px; border: none; margin-bottom: 6px; background: #219653; color: #fff; font-weight: 600; cursor: pointer;}
          .modal-btn.danger-btn { background: #dc3545; }
          .modal-input { width: 100%; padding: 10px; margin-bottom: 12px; border: 1px solid #ddd; border-radius: 6px;}
          .modal-error { color: #e74c3c; margin-top: 8px; text-align: center;}
          @media (max-width: 800px) {
            .main-app { flex-direction: column; }
            .sidebar { width: 100vw; min-width: 0; height: auto; position: fixed; left: 0; top: 2.7rem; z-index: 200;}
            .chat-panel { margin-top: 2.7rem; }
            .modal { min-width: 93vw; }
          }
        `}</style>
      </div>
    </ThemeContext.Provider>
  );
}

// ====== GROUP MESSAGE ITEM: supports reactions, edit, reply, pin, star, status, GIF/sticker/voice/file ======
function GroupMessageItem({
  msg, currentUser, onPin, onUnpin, onReact, onReply, onEdit, onDelete, onStar, onUnstar,
  isPinned, isStarred, isAdmin, replyToMsg
}) {
  const [showMenu, setShowMenu] = useState(false);
  const [showReactions, setShowReactions] = useState(false);
  const isSelf = msg.from === currentUser;
  function formatTime(ts) {
    if (!ts) return ""; const d = ts.toDate ? ts.toDate() : new Date(ts);
    return d.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
  }
  return (
    <div className={`group-msg ${isSelf ? "self" : ""}`}>
      <div className="group-msg-avatar">
        <img src={msg.bot ? "/images/logo.jpeg" : (msg.profilePhotoURL || "/images/logo.jpeg")} alt="avatar" style={{ width: 36, borderRadius: "50%" }} />
      </div>
      <div className="group-msg-content">
        <div className="group-msg-header">
          <span className="group-msg-username">{msg.username || (msg.bot ? "Bot" : "User")}</span>
          <span className="group-msg-time">{formatTime(msg.createdAt)}</span>
          <span className="group-msg-status">{msg.status === "sent" && "✓"}</span>
          {isPinned && <span style={{ color: "#f1c40f", marginLeft: 4 }}>📌</span>}
        </div>
        {replyToMsg && (
          <div className="group-msg-reply">
            <span style={{ color: "#888" }}>↪ {replyToMsg.username}: {replyToMsg.text}</span>
          </div>
        )}
        <div className="group-msg-body">
          {msg.mediaUrl && msg.mediaType === "image" && (
            <img src={msg.mediaUrl} alt="media" style={{ maxWidth: 160, borderRadius: 7, marginBottom: 3 }} />
          )}
          {msg.mediaUrl && msg.mediaType === "video" && (
            <video src={msg.mediaUrl} controls style={{ maxWidth: 160, borderRadius: 7, marginBottom: 3 }} />
          )}
          {msg.mediaUrl && msg.mediaType === "voice" && (
            <audio src={msg.mediaUrl} controls style={{ marginBottom: 3 }} />
          )}
          {msg.mediaUrl && msg.mediaType === "gif" && (
            <img src={msg.mediaUrl} alt="GIF" style={{ maxWidth: 160, borderRadius: 7, marginBottom: 3 }} />
          )}
          {msg.mediaUrl && msg.mediaType === "file" && (
            <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" style={{ color: "#219653" }}>
              {msg.mediaUrl.split("/").pop()}
            </a>
          )}
          {msg.text && <span>{msg.text}{msg.edited && <span style={{ fontSize: 10, color: "#aaa", marginLeft: 4 }}>(edited)</span>}</span>}
        </div>
        {/* Reactions */}
        <div className="group-msg-reactions">
          {msg.reactions && Object.entries(msg.reactions).map(([emoji, arr]) =>
            arr.length > 0 && (
              <span key={emoji} className="reaction-badge" onClick={() => onReact(emoji)}>
                {emoji} {arr.length}
              </span>
            )
          )}
          <button className="reaction-btn" onClick={() => setShowReactions(r => !r)}>+</button>
          {showReactions && (
            <div className="reactions-panel">
              {["👍", "😂", "❤️", "🔥", "😮", "😢", "🤖"].map(emoji => (
                <span key={emoji} className="reaction" onClick={() => { onReact(emoji); setShowReactions(false); }}>{emoji}</span>
              ))}
            </div>
          )}
        </div>
        {/* Actions */}
        <div className="group-msg-actions">
          <button onClick={onReply} title="Reply">↩</button>
          {isSelf && <button onClick={onEdit} title="Edit">✎</button>}
          {isSelf && <button onClick={onDelete} title="Delete">🗑</button>}
          {isAdmin && !isPinned && <button onClick={onPin} title="Pin">📌</button>}
          {isAdmin && isPinned && <button onClick={onUnpin} title="Unpin">📍</button>}
          {isStarred ? <button onClick={onUnstar} title="Unstar">⭐</button> : <button onClick={onStar} title="Star">☆</button>}
        </div>
        <style>{`
          .group-msg { display: flex; align-items: flex-start; margin-bottom: 12px;}
          .group-msg.self { flex-direction: row-reverse;}
          .group-msg-avatar { margin-right: 9px;}
          .group-msg.self .group-msg-avatar { margin-left: 9px; margin-right: 0;}
          .group-msg-content { flex: 1; }
          .group-msg-header { font-size: 13px; font-weight: bold; color: #219653; display: flex; align-items: center; gap: 9px;}
          .group-msg-username { font-weight: 700;}
          .group-msg-body { font-size: 15px; margin: 2px 0;}
          .group-msg-reply { background: #f3f3f3; color: #888; font-size: 12px; border-radius: 6px; padding: 3px 7px; margin-bottom: 3px;}
          .group-msg-actions { font-size: 1.1em; color: #888; display: flex; gap: 7px;}
          .group-msg-actions button { background: none; border: none; color: #888; cursor: pointer;}
          .group-msg-reactions { display: flex; gap: 6px; align-items: center; margin: 3px 0;}
          .reaction-badge { background: #e9fbe6; color: #219653; border-radius: 10px; font-size: 1.01em; padding: 0 7px; cursor: pointer;}
          .reaction-btn { background: #f3f3f3; border: none; border-radius: 10px; font-size: 1em; padding: 0 7px; cursor: pointer;}
          .reactions-panel { background: #fff; border: 1px solid #ddd; border-radius: 10px; display: flex; gap: 7px; padding: 4px 7px; position: absolute; z-index: 20;}
          .reaction { font-size: 1.2em; cursor: pointer;}
        `}</style>
      </div>
    </div>
  );
}